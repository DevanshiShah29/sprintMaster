type User {
  _id: ID!,
  firstName: String!
  lastName: String!
  email: String!
  skills: String
  mobileNo: String
  avtaar: String
  team: Team
  createdAt: String
}
type Query {
  users(_id: ID, team: ID): [User!]!
}
type Usererror{
  name: String,
  message: String
}

input UserInput{
  firstName: String!
  lastName: String!
  email: String!
  skills: String
  mobileNo: String
  avtaar: String
  team: ID!
}
type UserPayload{
  error: [Usererror],
  user: User
}

input loginInput{
  email: String!,
  password: String!
}
type LoginPayload{
  user:User,
  token: String!,
  error: [Usererror]
}
input UpdateUserInput{
  _id: ID!
  firstName: String
  password: String
  lastName: String
  skills: String
  mobileNo: String
  avtaar: String
  team: ID!
}
input RemoveUserInput{
    _id: ID!
  }
type generalMessagePayload{
    error: [error],
    message: String
}
input changePasswordInput{
  _id: ID!
  oldPassword: String!
  newPassword: String!
  confirmPassword: String!
}
input forgotPasswordInput{
  email: String!
}
type Mutation{
  createUser(input:UserInput): UserPayload
  updateUser(input:UpdateUserInput): UserPayload
  login(input:loginInput): LoginPayload,
  removeUser(input:RemoveUserInput): generalMessagePayload
  changePassword(input:changePasswordInput): generalMessagePayload
  forgotPassword(input:forgotPasswordInput): generalMessagePayload
}

