enum projectStatusType{
   Pending
   Active
   Completed
   Onhold
}

type Project{
  _id: ID!,
  name: String!
  code: String!
  smj: User!
  dsmj: User
  po: User!
  spo: User
  status: projectStatusType!
  createdAt: String
}
type Query {
  projects(_id: ID): [Project!]!
}

input ProjectInput{
  name: String!
  code: String!
  smj: ID!
  dsmj: ID
  po: ID!
  spo: ID
  status: projectStatusType!
}

input updateProjectInput{
  _id: ID!
  name: String!
  code: String!
  smj: ID!
  dsmj: ID
  po: ID!
  spo: ID
  status: projectStatusType!
}
type ProjectGeneralPayload{
  message: String,
  error: [ProjectError]
}
type ProjectError{
  name: String,
  message: String
}

type ProjectPayload{
  error: [ProjectError],
  project: Project
}
input RemoveProjectInput{
    _id: ID!
}


type Mutation{
    createProject(input:ProjectInput): ProjectPayload
    updateProject(input:updateProjectInput): ProjectPayload
    removeProject(input:RemoveProjectInput): ProjectGeneralPayload
}